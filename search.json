[{"path":[]},{"path":"https://njtierney.github.io/geotargets/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://njtierney.github.io/geotargets/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://njtierney.github.io/geotargets/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://njtierney.github.io/geotargets/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://njtierney.github.io/geotargets/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement nicholas.tierney@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://njtierney.github.io/geotargets/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://njtierney.github.io/geotargets/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://njtierney.github.io/geotargets/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://njtierney.github.io/geotargets/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://njtierney.github.io/geotargets/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://njtierney.github.io/geotargets/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://njtierney.github.io/geotargets/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 geotargets authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://njtierney.github.io/geotargets/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicholas Tierney. Author, maintainer. Eric Scott. Author. Andrew Brown. Author.","code":""},{"path":"https://njtierney.github.io/geotargets/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tierney N, Scott E, Brown (2024). geotargets: Targets extensions geospatial formats. R package version 0.0.0.9000, https://njtierney.github.io/geotargets/, https://github.com/njtierney/geotargets.","code":"@Manual{,   title = {geotargets: Targets extensions for geospatial formats},   author = {Nicholas Tierney and Eric Scott and Andrew Brown},   year = {2024},   note = {R package version 0.0.0.9000, https://njtierney.github.io/geotargets/},   url = {https://github.com/njtierney/geotargets}, }"},{"path":"https://njtierney.github.io/geotargets/index.html","id":"geotargets","dir":"","previous_headings":"","what":"Targets extensions for geospatial formats","title":"Targets extensions for geospatial formats","text":"geotargets extends targets work geospatial data formats, rasters vectors (e.g., shapefiles). relatively common gotcha moment using popular libraries like terra targets running erros read write. Due limitations come underlying C++ implementation terra library, specific ways write read objects. See ?terra details. geotargets helps handle write read steps, don’t worry can use targets used . essence, ’ve ever come across error: trying read geospatial raster vector targets, :)","code":"Error in .External(list(name = \"CppMethod__invoke_notvoid\", address = <pointer: 0x0>,  :    NULL value passed as symbol address Error: external pointer is not valid"},{"path":"https://njtierney.github.io/geotargets/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Targets extensions for geospatial formats","text":"can install development version geotargets like :","code":"install.packages(\"geotargets\", repos = c(\"https://njtierney.r-universe.dev\", \"https://cran.r-project.org\"))"},{"path":"https://njtierney.github.io/geotargets/index.html","id":"a-note-on-development","dir":"","previous_headings":"","what":"A note on development","title":"Targets extensions for geospatial formats","text":"geotargets still undergoing development, love people use package kick tyres. using work, want users know API change subtle breaking ways.","code":""},{"path":"https://njtierney.github.io/geotargets/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Targets extensions for geospatial formats","text":"show three examples target factories: tar_terra_rast() tar_terra_vect() tar_terra_sprc() use place tar_target() targets pipeline, work terra raster terra vector data. bit tricky implement targets workflows README, like see download working examples , see repo, demo-geotargets.","code":""},{"path":"https://njtierney.github.io/geotargets/index.html","id":"tar_terra_rast-targets-with-terra-rasters","dir":"","previous_headings":"","what":"tar_terra_rast(): targets with terra rasters","title":"Targets extensions for geospatial formats","text":"","code":"library(targets) tar_dir({ # tar_dir() runs code from a temporary directory.   tar_script({     library(targets)     library(geotargets)     list(       tar_terra_rast(         terra_rast_example,         system.file(\"ex/elev.tif\", package = \"terra\") |> terra::rast()       )     )   })   tar_make()   x <- tar_read(terra_rast_example)   x })"},{"path":"https://njtierney.github.io/geotargets/index.html","id":"tar_terra_vect-targets-with-terra-vectors","dir":"","previous_headings":"","what":"tar_terra_vect(): targets with terra vectors","title":"Targets extensions for geospatial formats","text":"","code":"tar_dir({ # tar_dir() runs code from a temporary directory.   tar_script({     library(geotargets)     lux_area <- function(projection = \"EPSG:4326\") {       terra::project(         terra::vect(system.file(\"ex\", \"lux.shp\",           package = \"terra\"         )),         projection       )     }     list(       tar_terra_vect(         terra_vect_example,         lux_area()       )     )   })   tar_make()   x <- tar_read(terra_vect_example)   x })"},{"path":"https://njtierney.github.io/geotargets/index.html","id":"tar_terra_sprc-targets-with-terra-raster-collections","dir":"","previous_headings":"","what":"tar_terra_sprc(): targets with terra raster collections","title":"Targets extensions for geospatial formats","text":"","code":"targets::tar_dir({ # tar_dir() runs code from a temporary directory.   library(geotargets)   targets::tar_script({     elev_scale <- function(z = 1, projection = \"EPSG:4326\") {       terra::project(         terra::rast(system.file(\"ex\", \"elev.tif\", package = \"terra\")) * z,         projection       )     }     list(       tar_terra_sprc(         raster_elevs,         # two rasters, one unaltered, one scaled by factor of 2 and         # reprojected to interrupted good homolosine         command = terra::sprc(list(           elev_scale(1),           elev_scale(2, \"+proj=igh\")         ))       )     )   })   targets::tar_make()   x <- targets::tar_read(raster_elevs) })"},{"path":"https://njtierney.github.io/geotargets/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Targets extensions for geospatial formats","text":"Please note geotargets project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://njtierney.github.io/geotargets/reference/geotargets-options.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or Set geotargets Options — geotargets_option_get","title":"Get or Set geotargets Options — geotargets_option_get","text":"Get set behavior geospatial data target stores using geotargets-specific global options.","code":""},{"path":"https://njtierney.github.io/geotargets/reference/geotargets-options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or Set geotargets Options — geotargets_option_get","text":"","code":"geotargets_option_get(option_name)  geotargets_option_set(option_name, option_value)"},{"path":"https://njtierney.github.io/geotargets/reference/geotargets-options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or Set geotargets Options — geotargets_option_get","text":"option_name Character. Option name. See Details. option_value Value assign option x.","code":""},{"path":[]},{"path":"https://njtierney.github.io/geotargets/reference/geotargets-options.html","id":"available-options","dir":"Reference","previous_headings":"","what":"Available Options","title":"Get or Set geotargets Options — geotargets_option_get","text":"\"geotargets.gdal.raster.driver\" - character. Length 1. Set driver used raster data target store (default: \"GTiff\"). Options driver names can found : https://gdal.org/drivers/raster/index.html \"geotargets.gdal.raster.creation_options\" - character. Set GDAL creation options used writing raster files target store (default: \"\"). may specify multiple values e.g. c(\"COMPRESS=DEFLATE\", \"TFW=YES\"). GDAL driver supports unique set creation options. example, default \"GTiff\" driver: https://gdal.org/drivers/raster/gtiff.html#creation-options \"geotargets.gdal.vector.driver\" - character. Length 1. Set file type used vector data target store (default: \"GeoJSON\"). \"geotargets.gdal.vector.creation_options\" - character. Set GDAL layer creation options used writing vector files target store (default: \"ENCODING=UTF-8\"). may specify multiple values e.g. c(\"WRITE_BBOX=YES\", \"COORDINATE_PRECISION=10\"). GDAL driver supports unique set creation options. example, default \"GeoJSON\" driver: https://gdal.org/drivers/vector/geojson.html#layer-creation-options option can overridden system environment variable. Options include: GEOTARGETS_GDAL_RASTER_DRIVER GEOTARGETS_GDAL_RASTER_CREATION_OPTIONS GEOTARGETS_GDAL_VECTOR_DRIVER GEOTARGETS_GDAL_VECTOR_CREATION_OPTIONS specifying options support multiple values using system environment variable, separate options delimited semicolon (\";\"). example: \"COMPRESS=DEFLATE;TFW=YES\".","code":""},{"path":"https://njtierney.github.io/geotargets/reference/geotargets-package.html","id":null,"dir":"Reference","previous_headings":"","what":"geotargets: Targets extensions for geospatial formats — geotargets-package","title":"geotargets: Targets extensions for geospatial formats — geotargets-package","text":"Provides extensions various geospatial file formats, shapefiles rasters. See vignettes worked examples demonstrations explanations use various package extensions.","code":""},{"path":[]},{"path":"https://njtierney.github.io/geotargets/reference/geotargets-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"geotargets: Targets extensions for geospatial formats — geotargets-package","text":"Maintainer: Nicholas Tierney nicholas.tierney@gmail.com (ORCID) Authors: Eric Scott (ORCID) Andrew Brown (ORCID)","code":""},{"path":"https://njtierney.github.io/geotargets/reference/tar_terra_rast.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a terra SpatRaster target — tar_terra_rast","title":"Create a terra SpatRaster target — tar_terra_rast","text":"Provides target format terra::SpatRaster objects.","code":""},{"path":"https://njtierney.github.io/geotargets/reference/tar_terra_rast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a terra SpatRaster target — tar_terra_rast","text":"","code":"tar_terra_rast(   name,   command,   pattern = NULL,   filetype = NULL,   gdal = NULL,   ...,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\") )"},{"path":"https://njtierney.github.io/geotargets/reference/tar_terra_rast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a terra SpatRaster target — tar_terra_rast","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. pattern Language define branching target. example, pipeline numeric vector targets x y, tar_target(z, x + y, pattern = map(x, y)) implicitly defines branches z compute x[1] + y[1], x[2] + y[2], . See user manual details. filetype character. File format expressed GDAL driver names passed terra::writeRaster() gdal character. GDAL driver specific datasource creation options passed terra::writeRaster() ... Additional arguments yet used tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date.","code":""},{"path":[]},{"path":"https://njtierney.github.io/geotargets/reference/tar_terra_rast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a terra SpatRaster target — tar_terra_rast","text":"","code":"if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") {  targets::tar_dir({ # tar_dir() runs code from a temporary directory.    library(geotargets)    targets::tar_script({      list(        geotargets::tar_terra_rast(          terra_rast_example,          system.file(\"ex/elev.tif\", package = \"terra\") |> terra::rast()        )      )    })    targets::tar_make()    x <- targets::tar_read(terra_rast_example)  }) }"},{"path":"https://njtierney.github.io/geotargets/reference/tar_terra_sprc.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a terra SpatRasterCollection target — tar_terra_sprc","title":"Create a terra SpatRasterCollection target — tar_terra_sprc","text":"Provides target format terra::SpatRasterCollection objects, restriction extent geometric parameters.","code":""},{"path":"https://njtierney.github.io/geotargets/reference/tar_terra_sprc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a terra SpatRasterCollection target — tar_terra_sprc","text":"","code":"tar_terra_sprc(   name,   command,   pattern = NULL,   filetype = NULL,   gdal = NULL,   ...,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\") )"},{"path":"https://njtierney.github.io/geotargets/reference/tar_terra_sprc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a terra SpatRasterCollection target — tar_terra_sprc","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. pattern Language define branching target. example, pipeline numeric vector targets x y, tar_target(z, x + y, pattern = map(x, y)) implicitly defines branches z compute x[1] + y[1], x[2] + y[2], . See user manual details. filetype character. File format expressed GDAL driver names passed terra::writeRaster() gdal character. GDAL driver specific datasource creation options passed terra::writeRaster() ... Additional arguments yet used tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date.","code":""},{"path":[]},{"path":"https://njtierney.github.io/geotargets/reference/tar_terra_sprc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a terra SpatRasterCollection target — tar_terra_sprc","text":"Andrew Gene Brown Nicholas Tierney","code":""},{"path":"https://njtierney.github.io/geotargets/reference/tar_terra_sprc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a terra SpatRasterCollection target — tar_terra_sprc","text":"","code":"if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") {   targets::tar_dir({ # tar_dir() runs code from a temporary directory.     library(geotargets)     targets::tar_script({       elev_scale <- function(z = 1, projection = \"EPSG:4326\") {         terra::project(           terra::rast(system.file(\"ex\", \"elev.tif\", package = \"terra\")) * z,           projection         )       }       list(         tar_terra_sprc(           raster_elevs,           # two rasters, one unaltered, one scaled by factor of 2 and           # reprojected to interrupted good homolosine           command = terra::sprc(list(             elev_scale(1),             elev_scale(2, \"+proj=igh\")           ))         )       )     })     targets::tar_make()     x <- targets::tar_read(raster_elevs)   }) }"},{"path":"https://njtierney.github.io/geotargets/reference/tar_terra_vect.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a terra SpatVector target — tar_terra_vect","title":"Create a terra SpatVector target — tar_terra_vect","text":"Provides target format terra::SpatVector objects.","code":""},{"path":"https://njtierney.github.io/geotargets/reference/tar_terra_vect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a terra SpatVector target — tar_terra_vect","text":"","code":"tar_terra_vect(   name,   command,   pattern = NULL,   filetype = NULL,   gdal = NULL,   ...,   packages = targets::tar_option_get(\"packages\"),   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\") )"},{"path":"https://njtierney.github.io/geotargets/reference/tar_terra_vect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a terra SpatVector target — tar_terra_vect","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. pattern Language define branching target. example, pipeline numeric vector targets x y, tar_target(z, x + y, pattern = map(x, y)) implicitly defines branches z compute x[1] + y[1], x[2] + y[2], . See user manual details. filetype character. File format expressed GDAL driver names passed terra::writeVector(). See 'Note' details gdal character. GDAL driver specific datasource creation options passed terra::writeVector(). ... Additional arguments yet used packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. library Character vector library paths try loading packages. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date.","code":""},{"path":"https://njtierney.github.io/geotargets/reference/tar_terra_vect.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a terra SpatVector target — tar_terra_vect","text":"Although may pass supported GDAL vector driver filetype argument, formats guaranteed work geotargets.  moment, tested GeoJSON ESRI Shapefile appear work generally.","code":""},{"path":"https://njtierney.github.io/geotargets/reference/tar_terra_vect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a terra SpatVector target — tar_terra_vect","text":"","code":"if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") {   targets::tar_dir({ # tar_dir() runs code from a temporary directory.     targets::tar_script({       lux_area <- function(projection = \"EPSG:4326\") {         terra::project(           terra::vect(system.file(\"ex\", \"lux.shp\",             package = \"terra\"           )),           projection         )       }       list(         geotargets::tar_terra_vect(           terra_vect_example,           lux_area()         )       )     })     targets::tar_make()     x <- targets::tar_read(terra_vect_example)   }) }"}]
